image: node:16.15.0-alpine

stages:
  - install
  - build
  - deploy

cache:
  # most npm libraries will only have 1 entry for the base project deps
  -  &global_cache_node_mods
    key:
      prefix: ${CI_COMMIT_REF_SLUG}
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull  # prevent subsequent jobs from modifying cache

install:
  stage: install
  cache:
    - key: ${CI_JOB_NAME}
      paths:
        - .npm/
      when: on_success
    -
      <<: *global_cache_node_mods
      policy: pull-push
  rules:
    - if: "$CI_PIPELINE_SOURCE != 'pipeline' && ($CI_COMMIT_BRANCH == 'main' || $CI_COMMIT_BRANCH == 'pre-prod')"
      changes:
        - package.json
  script:
    - npm ci --cache .npm --prefer-offline

build:
  stage: build
  when: on_success
  only:
    refs:
      - main
      - pre-prod
  script:
    - npm run build
    - tar -czf project.tar.gz dist
    - apk --no-cache add curl
    - echo $CI_COMMIT_BRANCH
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file project.tar.gz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/deploy/${CI_COMMIT_BRANCH}/deploy.tar.gz"'

deploy:
  stage: deploy
  inherit:
    variables: false
  variables:
    CI_PIPELINE_SERVICE: frontend
  trigger:
    project: rustduel/full
    branch: $CI_COMMIT_BRANCH
    strategy: depend
  when: manual
  only:
    - main


pre-prod deploy:
  extends: deploy
  when: on_success
  only:
    - pre-prod
